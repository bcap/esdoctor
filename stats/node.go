package stats

type NodeName = string

type ThreadPoolName = string

// NOTE: The structs in this package were generated by getting responses from ES, using
// this handy tool at https://mholt.github.io/json-to-go/ and making adjustments

type Nodes struct {
	Response struct {
		Total      int `json:"total"`
		Successful int `json:"successful"`
		Failed     int `json:"failed"`
	} `json:"_nodes"`
	ClusterName string             `json:"cluster_name"`
	Nodes       map[NodeName]*Node `json:"nodes"`
}

type Node struct {
	Timestamp int64    `json:"timestamp"`
	Name      string   `json:"name"`
	Roles     []string `json:"roles"`
	Indices   Index    `json:"indices"`
	Os        struct {
		Timestamp int64 `json:"timestamp"`
		CPU       struct {
			Percent     int `json:"percent"`
			LoadAverage struct {
				OneM  float64 `json:"1m"`
				FiveM float64 `json:"5m"`
				One5M float64 `json:"15m"`
			} `json:"load_average"`
		} `json:"cpu"`
		Mem struct {
			TotalInBytes int64 `json:"total_in_bytes"`
			FreeInBytes  int   `json:"free_in_bytes"`
			UsedInBytes  int64 `json:"used_in_bytes"`
			FreePercent  int   `json:"free_percent"`
			UsedPercent  int   `json:"used_percent"`
		} `json:"mem"`
		Swap struct {
			TotalInBytes int `json:"total_in_bytes"`
			FreeInBytes  int `json:"free_in_bytes"`
			UsedInBytes  int `json:"used_in_bytes"`
		} `json:"swap"`
		Cgroup struct {
			Cpuacct struct {
				ControlGroup string `json:"control_group"`
				UsageNanos   int64  `json:"usage_nanos"`
			} `json:"cpuacct"`
			CPU struct {
				ControlGroup    string `json:"control_group"`
				CfsPeriodMicros int    `json:"cfs_period_micros"`
				CfsQuotaMicros  int    `json:"cfs_quota_micros"`
				Stat            struct {
					NumberOfElapsedPeriods int `json:"number_of_elapsed_periods"`
					NumberOfTimesThrottled int `json:"number_of_times_throttled"`
					TimeThrottledNanos     int `json:"time_throttled_nanos"`
				} `json:"stat"`
			} `json:"cpu"`
			Memory struct {
				ControlGroup string `json:"control_group"`
				LimitInBytes string `json:"limit_in_bytes"`
				UsageInBytes string `json:"usage_in_bytes"`
			} `json:"memory"`
		} `json:"cgroup"`
	} `json:"os"`
	Process struct {
		Timestamp           int64 `json:"timestamp"`
		OpenFileDescriptors int   `json:"open_file_descriptors"`
		MaxFileDescriptors  int   `json:"max_file_descriptors"`
		CPU                 struct {
			Percent       int `json:"percent"`
			TotalInMillis int `json:"total_in_millis"`
		} `json:"cpu"`
		Mem struct {
			TotalVirtualInBytes int64 `json:"total_virtual_in_bytes"`
		} `json:"mem"`
	} `json:"process"`
	Jvm struct {
		Timestamp      int64 `json:"timestamp"`
		UptimeInMillis int64 `json:"uptime_in_millis"`
		Mem            struct {
			HeapUsedInBytes         int   `json:"heap_used_in_bytes"`
			HeapUsedPercent         int   `json:"heap_used_percent"`
			HeapCommittedInBytes    int64 `json:"heap_committed_in_bytes"`
			HeapMaxInBytes          int64 `json:"heap_max_in_bytes"`
			NonHeapUsedInBytes      int   `json:"non_heap_used_in_bytes"`
			NonHeapCommittedInBytes int   `json:"non_heap_committed_in_bytes"`
			Pools                   struct {
				Young struct {
					UsedInBytes     int `json:"used_in_bytes"`
					MaxInBytes      int `json:"max_in_bytes"`
					PeakUsedInBytes int `json:"peak_used_in_bytes"`
					PeakMaxInBytes  int `json:"peak_max_in_bytes"`
				} `json:"young"`
				Survivor struct {
					UsedInBytes     int `json:"used_in_bytes"`
					MaxInBytes      int `json:"max_in_bytes"`
					PeakUsedInBytes int `json:"peak_used_in_bytes"`
					PeakMaxInBytes  int `json:"peak_max_in_bytes"`
				} `json:"survivor"`
				Old struct {
					UsedInBytes     int   `json:"used_in_bytes"`
					MaxInBytes      int64 `json:"max_in_bytes"`
					PeakUsedInBytes int   `json:"peak_used_in_bytes"`
					PeakMaxInBytes  int64 `json:"peak_max_in_bytes"`
				} `json:"old"`
			} `json:"pools"`
		} `json:"mem"`
		Threads struct {
			Count     int `json:"count"`
			PeakCount int `json:"peak_count"`
		} `json:"threads"`
		Gc struct {
			Collectors struct {
				Young struct {
					CollectionCount        int `json:"collection_count"`
					CollectionTimeInMillis int `json:"collection_time_in_millis"`
				} `json:"young"`
				Old struct {
					CollectionCount        int `json:"collection_count"`
					CollectionTimeInMillis int `json:"collection_time_in_millis"`
				} `json:"old"`
			} `json:"collectors"`
		} `json:"gc"`
		BufferPools map[string]struct {
			Count                int `json:"count"`
			UsedInBytes          int `json:"used_in_bytes"`
			TotalCapacityInBytes int `json:"total_capacity_in_bytes"`
		} `json:"buffer_pools"`
		Classes struct {
			CurrentLoadedCount int `json:"current_loaded_count"`
			TotalLoadedCount   int `json:"total_loaded_count"`
			TotalUnloadedCount int `json:"total_unloaded_count"`
		} `json:"classes"`
	} `json:"jvm"`
	ThreadPool map[ThreadPoolName]ThreadPool `json:"thread_pool"`
	Fs         struct {
		Timestamp int64 `json:"timestamp"`
		Total     struct {
			TotalInBytes     int64 `json:"total_in_bytes"`
			FreeInBytes      int64 `json:"free_in_bytes"`
			AvailableInBytes int64 `json:"available_in_bytes"`
		} `json:"total"`
		Data []struct {
			Type             string `json:"type"`
			TotalInBytes     int64  `json:"total_in_bytes"`
			FreeInBytes      int64  `json:"free_in_bytes"`
			AvailableInBytes int64  `json:"available_in_bytes"`
		} `json:"data"`
		IoStats struct {
			Devices []struct {
				DeviceName      string `json:"device_name"`
				Operations      int    `json:"operations"`
				ReadOperations  int    `json:"read_operations"`
				WriteOperations int    `json:"write_operations"`
				ReadKilobytes   int    `json:"read_kilobytes"`
				WriteKilobytes  int    `json:"write_kilobytes"`
			} `json:"devices"`
			Total struct {
				Operations      int `json:"operations"`
				ReadOperations  int `json:"read_operations"`
				WriteOperations int `json:"write_operations"`
				ReadKilobytes   int `json:"read_kilobytes"`
				WriteKilobytes  int `json:"write_kilobytes"`
			} `json:"total"`
		} `json:"io_stats"`
	} `json:"fs"`
	HTTP struct {
		CurrentOpen int `json:"current_open"`
		TotalOpened int `json:"total_opened"`
	} `json:"http"`
	Breakers map[string]struct {
		LimitSizeInBytes     int64   `json:"limit_size_in_bytes"`
		LimitSize            string  `json:"limit_size"`
		EstimatedSizeInBytes int     `json:"estimated_size_in_bytes"`
		EstimatedSize        string  `json:"estimated_size"`
		Overhead             float64 `json:"overhead"`
		Tripped              int     `json:"tripped"`
	} `json:"breakers"`
	Script struct {
		Compilations              int `json:"compilations"`
		CacheEvictions            int `json:"cache_evictions"`
		CompilationLimitTriggered int `json:"compilation_limit_triggered"`
	} `json:"script"`
	Discovery struct {
		ClusterStateQueue struct {
			Total     int `json:"total"`
			Pending   int `json:"pending"`
			Committed int `json:"committed"`
		} `json:"cluster_state_queue"`
		PublishedClusterStates struct {
			FullStates        int `json:"full_states"`
			IncompatibleDiffs int `json:"incompatible_diffs"`
			CompatibleDiffs   int `json:"compatible_diffs"`
		} `json:"published_cluster_states"`
	} `json:"discovery"`
	Ingest struct {
		Total struct {
			Count        int `json:"count"`
			TimeInMillis int `json:"time_in_millis"`
			Current      int `json:"current"`
			Failed       int `json:"failed"`
		} `json:"total"`
		Pipelines struct {
		} `json:"pipelines"`
	} `json:"ingest"`
	AdaptiveSelection struct {
	} `json:"adaptive_selection"`
	ScriptCache struct {
		Sum struct {
			Compilations              int `json:"compilations"`
			CacheEvictions            int `json:"cache_evictions"`
			CompilationLimitTriggered int `json:"compilation_limit_triggered"`
		} `json:"sum"`
		Contexts []struct {
			Context                   string `json:"context"`
			Compilations              int    `json:"compilations"`
			CacheEvictions            int    `json:"cache_evictions"`
			CompilationLimitTriggered int    `json:"compilation_limit_triggered"`
		} `json:"contexts"`
	} `json:"script_cache"`
	IndexingPressure struct {
		Memory struct {
			Current struct {
				CombinedCoordinatingAndPrimaryInBytes int `json:"combined_coordinating_and_primary_in_bytes"`
				CoordinatingInBytes                   int `json:"coordinating_in_bytes"`
				PrimaryInBytes                        int `json:"primary_in_bytes"`
				ReplicaInBytes                        int `json:"replica_in_bytes"`
				AllInBytes                            int `json:"all_in_bytes"`
			} `json:"current"`
			Total struct {
				CombinedCoordinatingAndPrimaryInBytes int `json:"combined_coordinating_and_primary_in_bytes"`
				CoordinatingInBytes                   int `json:"coordinating_in_bytes"`
				PrimaryInBytes                        int `json:"primary_in_bytes"`
				ReplicaInBytes                        int `json:"replica_in_bytes"`
				AllInBytes                            int `json:"all_in_bytes"`
				CoordinatingRejections                int `json:"coordinating_rejections"`
				PrimaryRejections                     int `json:"primary_rejections"`
				ReplicaRejections                     int `json:"replica_rejections"`
			} `json:"total"`
		} `json:"memory"`
	} `json:"indexing_pressure"`
	ShardIndexingPressure struct {
		Stats struct {
		} `json:"stats"`
		TotalRejectionsBreakupShadowMode struct {
			NodeLimits                  int `json:"node_limits"`
			NoSuccessfulRequestLimits   int `json:"no_successful_request_limits"`
			ThroughputDegradationLimits int `json:"throughput_degradation_limits"`
		} `json:"total_rejections_breakup_shadow_mode"`
		Enabled  bool `json:"enabled"`
		Enforced bool `json:"enforced"`
	} `json:"shard_indexing_pressure"`
}

type ThreadPool struct {
	Threads   int `json:"threads"`
	Queue     int `json:"queue"`
	Active    int `json:"active"`
	Rejected  int `json:"rejected"`
	Largest   int `json:"largest"`
	Completed int `json:"completed"`
}
