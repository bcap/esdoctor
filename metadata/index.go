package metadata

import (
	"context"

	"esdoctor/client"
	"esdoctor/fetch"

	"github.com/imdario/mergo"
)

func GetIndexes(ctx context.Context, client client.Versioned) (Indices, error) {
	decoded := IndicesWithDefaults{}
	path := "_all?include_defaults=true&expand_wildcards=all"
	if err := fetch.Fetch(ctx, client, path, &decoded); err != nil {
		return Indices{}, err
	}
	result := Indices{}
	// for each index we merge the default settings with the specified settings, forming a
	// single view of all the settings the index has
	for k, v := range decoded {
		settings := &v.Index.Settings
		mergo.Merge(settings, v.Defaults)
		result[k] = &v.Index
	}
	return result, nil
}

// NOTE: The structs in this package were generated by getting responses from ES, using
// this handy tool at https://mholt.github.io/json-to-go/ and making adjustments

type IndexName = string

type PropertyName = string

type Indices = map[IndexName]*Index

type Index struct {
	Aliases  map[string]interface{} `json:"aliases"`
	Mappings struct {
		Dynamic    string                    `json:"dynamic"`
		Properties map[PropertyName]Property `json:"properties"`
	}
	Settings struct {
		Index IndexSettings `json:"index"`
	} `json:"settings"`
}

type IndicesWithDefaults = map[IndexName]IndexWithDefaults

type IndexWithDefaults struct {
	Index
	Defaults struct {
		Index IndexSettings `json:"index"`
	} `json:"defaults"`
}

type Property struct {
	Type string `json:"type"`
	// "dynamic" changed from boolean to string across versions
	Dynamic    interface{}               `json:"dynamic"`
	Index      bool                      `json:"index"`
	Enabled    bool                      `json:"enabled"`
	Properties map[PropertyName]Property `json:"properties"`
}

type IndexSettings struct {
	NumberOfShards     string `json:"number_of_shards"`
	AutoExpandReplicas string `json:"auto_expand_replicas"`
	ProvidedName       string `json:"provided_name"`
	CreationDate       string `json:"creation_date"`
	NumberOfReplicas   string `json:"number_of_replicas"`
	UUID               string `json:"uuid"`
	Version            struct {
		Created string `json:"created"`
	} `json:"version"`
	Opendistro struct {
		RollupIndex          string `json:"rollup_index"`
		IndexStateManagement struct {
			PolicyID      string `json:"policy_id"`
			RolloverAlias string `json:"rollover_alias"`
			AutoManage    string `json:"auto_manage"`
		} `json:"index_state_management"`
	} `json:"opendistro"`
	FlushAfterMerge string `json:"flush_after_merge"`
	KnnAlgoParam    struct {
		EfSearch       string `json:"ef_search"`
		EfConstruction string `json:"ef_construction"`
		M              string `json:"m"`
	} `json:"knn.algo_param"`
	FinalPipeline        string `json:"final_pipeline"`
	MaxInnerResultWindow string `json:"max_inner_result_window"`
	Unassigned           struct {
		NodeLeft struct {
			DelayedTimeout string `json:"delayed_timeout"`
		} `json:"node_left"`
	} `json:"unassigned"`
	MaxTermsCount             string `json:"max_terms_count"`
	RoutingPartitionSize      string `json:"routing_partition_size"`
	ForceMemoryTermDictionary string `json:"force_memory_term_dictionary"`
	MaxDocvalueFieldsSearch   string `json:"max_docvalue_fields_search"`
	Merge                     struct {
		Scheduler struct {
			MaxThreadCount string `json:"max_thread_count"`
			AutoThrottle   string `json:"auto_throttle"`
			MaxMergeCount  string `json:"max_merge_count"`
		} `json:"scheduler"`
		Policy struct {
			ReclaimDeletesWeight   string `json:"reclaim_deletes_weight"`
			FloorSegment           string `json:"floor_segment"`
			MaxMergeAtOnceExplicit string `json:"max_merge_at_once_explicit"`
			MaxMergeAtOnce         string `json:"max_merge_at_once"`
			MaxMergedSegment       string `json:"max_merged_segment"`
			ExpungeDeletesAllowed  string `json:"expunge_deletes_allowed"`
			SegmentsPerTier        string `json:"segments_per_tier"`
			DeletesPctAllowed      string `json:"deletes_pct_allowed"`
		} `json:"policy"`
	} `json:"merge"`
	MaxRefreshListeners string `json:"max_refresh_listeners"`
	Block               struct {
		Size struct {
			Shift string `json:"shift"`
		} `json:"size"`
	} `json:"block"`
	MaxRegexLength                string `json:"max_regex_length"`
	LoadFixedBitsetFiltersEagerly string `json:"load_fixed_bitset_filters_eagerly"`
	NumberOfRoutingShards         string `json:"number_of_routing_shards"`
	Write                         struct {
		WaitForActiveShards string `json:"wait_for_active_shards"`
	} `json:"write"`
	Ultrawarm struct {
		Migration struct {
			ForceMerge struct {
				MaxNumSegments string `json:"max_num_segments"`
			} `json:"force_merge"`
		} `json:"migration"`
		Prefetch struct {
			DocValue struct {
				Enabled string `json:"enabled"`
			} `json:"doc_value"`
		} `json:"prefetch"`
	} `json:"ultrawarm"`
	VerifiedBeforeClose string `json:"verified_before_close"`
	Mapping             struct {
		Coerce       string `json:"coerce"`
		NestedFields struct {
			Limit string `json:"limit"`
		} `json:"nested_fields"`
		Depth struct {
			Limit string `json:"limit"`
		} `json:"depth"`
		FieldNameLength struct {
			Limit string `json:"limit"`
		} `json:"field_name_length"`
		TotalFields struct {
			Limit string `json:"limit"`
		} `json:"total_fields"`
		NestedObjects struct {
			Limit string `json:"limit"`
		} `json:"nested_objects"`
		IgnoreMalformed string `json:"ignore_malformed"`
	} `json:"mapping"`
	SoftDeletes struct {
		Enabled   string `json:"enabled"`
		Retention struct {
			Operations string `json:"operations"`
		} `json:"retention"`
		RetentionLease struct {
			Period string `json:"period"`
		} `json:"retention_lease"`
	} `json:"soft_deletes"`
	LtrstoreVersion string `json:"ltrstore_version"`
	MaxScriptFields string `json:"max_script_fields"`
	Query           struct {
		DefaultField interface{} `json:"default_field"` // changed from string to []string across versions
		Parse        struct {
			AllowUnmappedFields string `json:"allow_unmapped_fields"`
		} `json:"parse"`
	} `json:"query"`
	Format string `json:"format"`
	Sort   struct {
		Missing []interface{} `json:"missing"`
		Mode    []interface{} `json:"mode"`
		Field   []interface{} `json:"field"`
		Order   []interface{} `json:"order"`
	} `json:"sort"`
	Priority string `json:"priority"`
	Bucket   string `json:"bucket"`
	Codec    string `json:"codec"`
	Warm     struct {
		Slowlog struct {
			Level     string `json:"level"`
			Threshold struct {
				Fetch struct {
					Warn  string `json:"warn"`
					Trace string `json:"trace"`
					Debug string `json:"debug"`
					Info  string `json:"info"`
				} `json:"fetch"`
				Query struct {
					Warn  string `json:"warn"`
					Trace string `json:"trace"`
					Debug string `json:"debug"`
					Info  string `json:"info"`
				} `json:"query"`
			} `json:"threshold"`
		} `json:"slowlog"`
	} `json:"warm"`
	MaxRescoreWindow          string `json:"max_rescore_window"`
	MaxAdjacencyMatrixFilters string `json:"max_adjacency_matrix_filters"`
	Analyze                   struct {
		MaxTokenCount string `json:"max_token_count"`
	} `json:"analyze"`
	KnnSpaceType            string `json:"knn.space_type"`
	GcDeletes               string `json:"gc_deletes"`
	OptimizeAutoGeneratedID string `json:"optimize_auto_generated_id"`
	Snapshot                struct {
		ID string `json:"id"`
	} `json:"snapshot"`
	MaxNgramDiff string `json:"max_ngram_diff"`
	Hidden       string `json:"hidden"`
	Translog     struct {
		GenerationThresholdSize string `json:"generation_threshold_size"`
		FlushThresholdSize      string `json:"flush_threshold_size"`
		SyncInterval            string `json:"sync_interval"`
		Retention               struct {
			Size string `json:"size"`
			Age  string `json:"age"`
		} `json:"retention"`
		Durability string `json:"durability"`
	} `json:"translog"`
	Cold struct {
		EndTime   string `json:"end_time"`
		Migration struct {
			Size  string `json:"size"`
			State string `json:"state"`
		} `json:"migration"`
		StartTime string `json:"start_time"`
		UUID      string `json:"uuid"`
	} `json:"cold"`
	Mapper struct {
		Dynamic string `json:"dynamic"`
	} `json:"mapper"`
	Recovery struct {
		Type string `json:"type"`
	} `json:"recovery"`
	Requests struct {
		Cache struct {
			Enable string `json:"enable"`
		} `json:"cache"`
	} `json:"requests"`
	DataPath string `json:"data_path"`
	Archived struct {
		Path string `json:"path"`
	} `json:"archived"`
	Highlight struct {
		MaxAnalyzedOffset string `json:"max_analyzed_offset"`
	} `json:"highlight"`
	Routing struct {
		Rebalance struct {
			Enable string `json:"enable"`
		} `json:"rebalance"`
		Allocation struct {
			Enable             string `json:"enable"`
			TotalShardsPerNode string `json:"total_shards_per_node"`
		} `json:"allocation"`
		SearchPreference string `json:"search_preference"`
	} `json:"routing"`
	Search struct {
		Slowlog struct {
			Level     string `json:"level"`
			Threshold struct {
				Fetch struct {
					Warn  string `json:"warn"`
					Trace string `json:"trace"`
					Debug string `json:"debug"`
					Info  string `json:"info"`
				} `json:"fetch"`
				Query struct {
					Warn  string `json:"warn"`
					Trace string `json:"trace"`
					Debug string `json:"debug"`
					Info  string `json:"info"`
				} `json:"query"`
			} `json:"threshold"`
		} `json:"slowlog"`
		Idle struct {
			After string `json:"after"`
		} `json:"idle"`
		Throttled string `json:"throttled"`
	} `json:"search"`
	Fielddata struct {
		Cache string `json:"cache"`
	} `json:"fielddata"`
	DefaultPipeline    string `json:"default_pipeline"`
	MaxSlicesPerScroll string `json:"max_slices_per_scroll"`
	Shard              struct {
		CheckOnStartup string `json:"check_on_startup"`
	} `json:"shard"`
	Percolator struct {
		MapUnmappedFieldsAsText string `json:"map_unmapped_fields_as_text"`
	} `json:"percolator"`
	Allocation struct {
		MaxRetries              string `json:"max_retries"`
		ExistingShardsAllocator string `json:"existing_shards_allocator"`
	} `json:"allocation"`
	RefreshInterval string `json:"refresh_interval"`
	Indexing        struct {
		Slowlog struct {
			Reformat  string `json:"reformat"`
			Threshold struct {
				Index struct {
					Warn  string `json:"warn"`
					Trace string `json:"trace"`
					Debug string `json:"debug"`
					Info  string `json:"info"`
				} `json:"index"`
			} `json:"threshold"`
			Source string `json:"source"`
			Level  string `json:"level"`
		} `json:"slowlog"`
	} `json:"indexing"`
	CompoundFormat string `json:"compound_format"`
	Blocks         struct {
		Metadata             string `json:"metadata"`
		Read                 string `json:"read"`
		ReadOnly             string `json:"read_only"`
		UltrawarmAllowDelete string `json:"ultrawarm_allow_delete"`
		ReadOnlyAllowDelete  string `json:"read_only_allow_delete"`
		Write                string `json:"write"`
		LeviathanReadOnly    string `json:"leviathan_read_only"`
	} `json:"blocks"`
	MaxResultWindow string `json:"max_result_window"`
	Knn             string `json:"knn"`
	Store           struct {
		StatsRefreshInterval string `json:"stats_refresh_interval"`
		Type                 string `json:"type"`
		Fs                   struct {
			FsLock string `json:"fs_lock"`
		} `json:"fs"`
		Preload []interface{} `json:"preload"`
	} `json:"store"`
	Queries struct {
		Cache struct {
			Enabled string `json:"enabled"`
		} `json:"cache"`
	} `json:"queries"`
	Warmer struct {
		Enabled string `json:"enabled"`
	} `json:"warmer"`
	MaxShingleDiff string `json:"max_shingle_diff"`
	Migration      struct {
		State string `json:"state"`
	} `json:"migration"`
	QueryString struct {
		Lenient string `json:"lenient"`
	} `json:"query_string"`
}
