package metadata

import (
	"context"

	"esdoctor/client"
	"esdoctor/fetch"
)

func GetClusterState(ctx context.Context, client client.Versioned) (*ClusterState, error) {
	result := ClusterState{}
	return &result, fetch.Fetch(ctx, client, "_cluster/state", &result)
}

func GetClusterHealth(ctx context.Context, client client.Versioned) (*ClusterHealth, error) {
	result := ClusterHealth{}
	return &result, fetch.Fetch(ctx, client, "_cluster/health", &result)
}

// NOTE: The structs in this package were generated by getting responses from ES, using
// this handy tool at https://mholt.github.io/json-to-go/ and making adjustments

type NodeId = string
type TemplateName = string
type TypeName = string
type ShardId = string

type ClusterState struct {
	ClusterName string      `json:"cluster_name"`
	ClusterUUID string      `json:"cluster_uuid"`
	Version     int         `json:"version"`
	StateUUID   string      `json:"state_uuid"`
	MasterNode  string      `json:"master_node"`
	Blocks      interface{} `json:"blocks"`
	Nodes       map[NodeId]struct {
		Name        string `json:"name"`
		EphemeralID string `json:"ephemeral_id"`
	} `json:"nodes"`
	Metadata  ClusterMetadata `json:"metadata"`
	Snapshots struct {
		Snapshots []interface{} `json:"snapshots"`
	} `json:"snapshots"`
	SnapshotDeletions struct {
		SnapshotDeletions []interface{} `json:"snapshot_deletions"`
	} `json:"snapshot_deletions"`
	Restore struct {
		Snapshots []interface{} `json:"snapshots"`
	} `json:"restore"`
	RoutingNodes struct {
		Unassigned []interface{}            `json:"unassigned"`
		Nodes      map[NodeId][]*ShardState `json:"nodes"`
	} `json:"routing_nodes"`
	RoutingTable struct {
		Indices map[IndexName]struct {
			Shards map[ShardId][]*ShardState `json:"shards"`
		} `json:"indices"`
	} `json:"routing_table"`
}

type ClusterMetadata struct {
	ClusterUUID          string `json:"cluster_uuid"`
	ClusterUUIDCommitted bool   `json:"cluster_uuid_committed"`
	ClusterCoordination  struct {
		Term                   int           `json:"term"`
		LastCommittedConfig    []string      `json:"last_committed_config"`
		LastAcceptedConfig     []string      `json:"last_accepted_config"`
		VotingConfigExclusions []interface{} `json:"voting_config_exclusions"`
	} `json:"cluster_coordination"`
	Templates  map[TemplateName]Template `json:"templates"`
	Indices    map[IndexName]IndexState  `json:"indices"`
	DataStream struct {
		DataStream struct {
		} `json:"data_stream"`
	} `json:"data_stream"`
	Repositories   map[string]Repository `json:"repositories"`
	IndexGraveyard struct {
		Tombstones []Tombstone `json:"tombstones"`
	} `json:"index-graveyard"`
}

type Template struct {
	Order         int      `json:"order"`
	IndexPatterns []string `json:"index_patterns"`
	Settings      struct {
		Index struct {
			NumberOfShards   string `json:"number_of_shards"`
			NumberOfReplicas string `json:"number_of_replicas"`
		} `json:"index"`
	} `json:"settings"`
	Mappings map[TypeName]struct {
		Properties map[PropertyName]Property `json:"properties"`
	} `json:"mappings"`
	Aliases struct {
	} `json:"aliases"`
}

type Repository struct {
	Type              string                 `json:"type"`
	Generation        int                    `json:"generation"`
	PendingGeneration int                    `json:"pending_generation"`
	Settings          map[string]interface{} `json:"settings"`
}

type Tombstone struct {
	Index struct {
		IndexName string `json:"index_name"`
		IndexUUID string `json:"index_uuid"`
	} `json:"index"`
	DeleteDateInMillis int64 `json:"delete_date_in_millis"`
}

type IndexState struct {
	Version          int    `json:"version"`
	MappingVersion   int    `json:"mapping_version"`
	SettingsVersion  int    `json:"settings_version"`
	AliasesVersion   int    `json:"aliases_version"`
	RoutingNumShards int    `json:"routing_num_shards"`
	State            string `json:"state"`
	Settings         struct {
		Index struct {
			CreationDate     string `json:"creation_date"`
			NumberOfShards   string `json:"number_of_shards"`
			NumberOfReplicas string `json:"number_of_replicas"`
			UUID             string `json:"uuid"`
			Version          struct {
				Created string `json:"created"`
			} `json:"version"`
			ProvidedName string `json:"provided_name"`
		} `json:"index"`
	} `json:"settings"`
	Mappings map[TypeName]struct {
		Properties map[PropertyName]Property `json:"properties"`
	} `json:"mappings"`
	Aliases      []interface{} `json:"aliases"`
	PrimaryTerms struct {
		Num0 int `json:"0"`
	} `json:"primary_terms"`
	InSyncAllocations struct {
		Num0 []string `json:"0"`
	} `json:"in_sync_allocations"`
	RolloverInfo struct {
	} `json:"rollover_info"`
}

type ShardState struct {
	State          string      `json:"state"`
	Primary        bool        `json:"primary"`
	Node           string      `json:"node"`
	RelocatingNode interface{} `json:"relocating_node"`
	Shard          int         `json:"shard"`
	Index          string      `json:"index"`
	AllocationID   struct {
		ID string `json:"id"`
	} `json:"allocation_id"`
}

type ClusterHealth struct {
	ClusterName                 string `json:"cluster_name"`
	Status                      string `json:"status"`
	TimedOut                    bool   `json:"timed_out"`
	NumberOfNodes               int    `json:"number_of_nodes"`
	NumberOfDataNodes           int    `json:"number_of_data_nodes"`
	ActivePrimaryShards         int    `json:"active_primary_shards"`
	ActiveShards                int    `json:"active_shards"`
	RelocatingShards            int    `json:"relocating_shards"`
	InitializingShards          int    `json:"initializing_shards"`
	UnassignedShards            int    `json:"unassigned_shards"`
	DelayedUnassignedShards     int    `json:"delayed_unassigned_shards"`
	NumberOfPendingTasks        int    `json:"number_of_pending_tasks"`
	NumberOfInFlightFetch       int    `json:"number_of_in_flight_fetch"`
	TaskMaxWaitingInQueueMillis int    `json:"task_max_waiting_in_queue_millis"`
}
